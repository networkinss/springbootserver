/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ch.inss.springapichallenge.controller;

import ch.inss.springapichallenge.model.ModelApiResponse;
import ch.inss.springapichallenge.model.Pet;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-10-21T20:36:18.094152+02:00[Europe/Zurich]")
@Validated
@Tag(name = "Petobject", description = "the Petobject API")
@RequestMapping("${openapi.petstoreTheTroublemakerOfOpenAPI30.base-path:/api/v3}")
public interface PetobjectApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /pet/uploadbinary : uploads a binary file
     * Uploads a binary file.
     *
     * @param orderId  (optional)
     * @param userId   (optional)
     * @param fileName (optional)
     * @return successful operation (status code 201)
     * or internal error. (status code 500)
     */
    @Operation(
            operationId = "uploadBinary",
            summary = "uploads a binary file",
            tags = {"petobject"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "internal error.")
            },
            security = {
                    @SecurityRequirement(name = "petstore_auth", scopes = {"write:pets", "read:pets"})
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/pet/uploadbinary",
            produces = {"application/json"},
            consumes = {"multipart/form-data"}
    )
    default ResponseEntity<ModelApiResponse> uploadBinary(
            @Parameter(name = "orderId", description = "") @Valid @RequestParam(value = "orderId", required = false) Integer orderId,
            @Parameter(name = "userId", description = "") @Valid @RequestParam(value = "userId", required = false) Integer userId,
            @Parameter(name = "fileName", description = "") @RequestPart(value = "fileName", required = false) MultipartFile fileName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 123, \"type\" : \"responsetype\", \"message\" : \"Message.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /pet/uploadbinplusobject : uploads a binary file plus json
     * Uploads a binary file including a json object.
     *
     * @param pet      (required)
     * @param fileName (optional)
     * @return successful operation (status code 201)
     * or internal error. (status code 500)
     */
    @Operation(
            operationId = "uploadBinaryPlusObject",
            summary = "uploads a binary file plus json",
            tags = {"petobject", "troublemaker"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "internal error.")
            },
            security = {
                    @SecurityRequirement(name = "petstore_auth", scopes = {"write:pets", "read:pets"})
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/pet/uploadbinplusobject",
            produces = {"application/json"},
            consumes = {"multipart/form-data"}
    )
    default ResponseEntity<ModelApiResponse> uploadBinaryPlusObject(
            @Parameter(name = "pet", description = "", required = true) @Valid @RequestParam(value = "pet", required = true) Pet pet,
            @Parameter(name = "fileName", description = "") @RequestPart(value = "fileName", required = false) MultipartFile fileName
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 123, \"type\" : \"responsetype\", \"message\" : \"Message.\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
