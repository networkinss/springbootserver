openapi: 3.0.2
info:
  contact:
    email: info@inss.ch
  description: |-
    Some sample APIs collected by International Network Support & Service - Glas.
    This document contains endpoints containing APIs that don't have only common formats like application/json, but more uncommon but standard formats like float numbers and special characters like german Umlaute.
    This is to test & check if a tool can handle also those formats.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://inss.ch
  title: "Petstore, the troublemaker of OpenAPI 3.0"
  version: 1.0.1
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://localhost:8080/api/v3
tags:
- description: APIs causing possibly issues for certain tools.
  name: troublemaker
- description: Everything about your Pets
  externalDocs:
    description: Find out more
    url: http://swagger.io
  name: pet
- description: Operations about user
  name: store
- description: Access to Petstore orders
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
  name: user
paths:
  /books:
    get:
      operationId: getAllUsingGET
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResourcesBookResource'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      summary: getAll
      tags:
      - book-controller
      x-accepts: application/hal+json
      x-tags:
      - tag: book-controller
  /books/{customerId}:
    get:
      operationId: getAllByCustomerIdUsingGET
      parameters:
      - description: customerId
        explode: false
        in: path
        name: customerId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResourcesBookResource'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      summary: getAllByCustomerId
      tags:
      - book-controller
      x-accepts: application/hal+json
      x-tags:
      - tag: book-controller
  /customers:
    get:
      operationId: getAllUsingGET_1
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResourcesCustomerResource'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      summary: getAll
      tags:
      - customer-controller
      x-accepts: application/hal+json
      x-tags:
      - tag: customer-controller
    post:
      operationId: insertUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        description: newCustomerResource
        required: true
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResourceCustomerResource'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      summary: insert
      tags:
      - customer-controller
      x-codegen-request-body-name: newCustomerResource
      x-content-type: application/json
      x-accepts: application/hal+json
      x-tags:
      - tag: customer-controller
    put:
      operationId: updateUsingPUT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
        description: updCustomerResource
        required: true
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResourceCustomerResource'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      summary: update
      tags:
      - customer-controller
      x-codegen-request-body-name: updCustomerResource
      x-content-type: application/json
      x-accepts: application/hal+json
      x-tags:
      - tag: customer-controller
  /customers/{id}:
    delete:
      operationId: deleteUsingDELETE
      parameters:
      - description: id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/Resourceobject'
          description: OK
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      summary: delete
      tags:
      - customer-controller
      x-accepts: application/hal+json
      x-tags:
      - tag: customer-controller
    get:
      operationId: getUsingGET
      parameters:
      - description: id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/ResourceCustomerResource'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      summary: get
      tags:
      - customer-controller
      x-accepts: application/hal+json
      x-tags:
      - tag: customer-controller
  /customers/{id}/v2:
    get:
      operationId: getWithoutGeneralLinksUsingGET
      parameters:
      - description: id
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/hal+json:
              schema:
                $ref: '#/components/schemas/CustomerResource'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      summary: getWithoutGeneralLinks
      tags:
      - customer-controller
      x-accepts: application/hal+json
      x-tags:
      - tag: customer-controller
  /pet:
    post:
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        description: Create a new pet in the store
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Successful operation
        "405":
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Add a new pet to the store
      tags:
      - pet
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: pet
    put:
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        description: Update an existent pet in the store
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Update an existing pet
      tags:
      - pet
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: pet
  /pet/findbystatus:
    get:
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
      - description: Status values that need to be considered for filter
        explode: true
        in: query
        name: status
        required: false
        schema:
          default: available
          enum:
          - available
          - pending
          - sold
          example: available
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
            application/xml:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: successful operation
        "400":
          description: Invalid status value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: "Two media types, application/json and application/xml."
      tags:
      - pet
      x-accepts: application/json
      x-tags:
      - tag: pet
      - tag: troublemaker
  /pet/findbytags:
    get:
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: findPetsByTags
      parameters:
      - description: Tags to filter by
        explode: true
        in: query
        name: tags
        required: false
        schema:
          example:
          - tags1
          - tags2
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: successful operation
        "400":
          description: Invalid tag value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Finds Pets by tags
      tags:
      - pet
      x-accepts: application/json
      x-tags:
      - tag: pet
  /oops:
    get:
      description: Produces sample error response.
      operationId: failingRequest
      responses:
        "200":
          description: Never returned.
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
      summary: Always fails with 400.
      tags:
      - troublemaker
      x-accepts: application/json
      x-tags:
      - tag: troublemaker
      - tag: failing
  /version:
    get:
      description: Returns plain text.
      operationId: getVersion
      responses:
        "200":
          content:
            text/plain:
              schema:
                example: Version 1.0.0
                type: string
          description: successful operation
      security:
      - api_key: []
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Mediatype plain/text.
      tags:
      - troublemaker
      x-accepts: text/plain
      x-tags:
      - tag: troublemaker
  /pet/{petId}:
    delete:
      description: Deletes a pet.
      operationId: deletePet
      parameters:
      - description: Api key.
        explode: false
        in: header
        name: API_KEY
        required: false
        schema:
          example: apikeyvalue1
          type: string
        style: simple
      - description: Pet id to delete
        explode: false
        in: path
        name: petId
        required: true
        schema:
          example: 99
          format: int64
          type: integer
        style: simple
      responses:
        "400":
          description: Invalid pet value
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Deletes a pet
      tags:
      - pet
      x-accepts: application/json
      x-tags:
      - tag: pet
    get:
      description: Returns a single pet with example of a german Umlaut.
      operationId: getPetById
      parameters:
      - description: ID of pet to return
        explode: false
        in: path
        name: petId
        required: true
        schema:
          example: 99
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      security:
      - api_key: []
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Sample data contains german umlaut.
      tags:
      - pet
      x-accepts: application/json
      x-tags:
      - tag: pet
      - tag: troublemaker
    post:
      description: Updates a pet in the store with form data.
      operationId: updatePetWithForm
      parameters:
      - description: ID of pet that needs to be updated
        explode: false
        in: path
        name: petId
        required: true
        schema:
          example: 99
          format: int64
          type: integer
        style: simple
      - description: Name of pet that needs to be updated
        explode: true
        in: query
        name: name
        required: false
        schema:
          example: dog
          type: string
        style: form
      - description: Status of pet that needs to be updated
        explode: true
        in: query
        name: status
        required: false
        schema:
          example: in progress.
          type: string
        style: form
      responses:
        "405":
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: Updates a pet in the store with form data
      tags:
      - pet
      x-accepts: application/json
      x-tags:
      - tag: pet
  /pet/uploadbinplusobject:
    post:
      description: Uploads a binary file including a json object.
      operationId: uploadBinaryPlusObject
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadBinaryPlusObject_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelApiResponse'
          description: successful operation
        "500":
          description: internal error.
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: uploads a binary file plus json
      tags:
      - petobject
      x-content-type: multipart/form-data
      x-accepts: application/json
      x-tags:
      - tag: petobject
      - tag: troublemaker
  /pet/uploadbinary:
    post:
      description: Uploads a binary file.
      operationId: uploadBinary
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/uploadBinary_request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelApiResponse'
          description: successful operation
        "500":
          description: internal error.
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: uploads a binary file
      tags:
      - petobject
      x-content-type: multipart/form-data
      x-accepts: application/json
      x-tags:
      - tag: petobject
  /pet/{petId}/uploadimage:
    post:
      description: Uploads an image.
      operationId: uploadFile
      parameters:
      - description: ID of pet to update
        explode: false
        in: path
        name: petId
        required: true
        schema:
          example: 99
          format: int64
          type: integer
        style: simple
      - description: Additional Metadata
        explode: true
        in: query
        name: additionalMetadata
        required: false
        schema:
          example: metadata
          type: string
        style: form
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: binary
              type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelApiResponse'
          description: successful operation
      security:
      - petstore_auth:
        - write:pets
        - read:pets
      summary: uploads an image
      tags:
      - pet
      x-content-type: application/octet-stream
      x-accepts: application/json
      x-tags:
      - tag: pet
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities. Values in JSON are
        in random order.
      operationId: getInventory
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  format: int32
                  type: integer
                type: object
          description: successful operation
      security:
      - api_key: []
      summary: JSON values in random order.
      tags:
      - store
      x-accepts: application/json
      x-tags:
      - tag: store
      - tag: troublemaker
  /store/order:
    post:
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "405":
          description: Invalid input
      summary: Place an order for a pet
      tags:
      - store
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: store
  /store/order/{orderId}:
    delete:
      description: For valid response try integer IDs with value < 1000. Anything
        above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
      - description: ID of the order that needs to be deleted
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          example: 1001
          format: int64
          type: integer
        style: simple
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Delete purchase order by ID
      tags:
      - store
      x-accepts: application/json
      x-tags:
      - tag: store
    get:
      description: For valid response try integer IDs with value <= 5 or > 10. Other
        values will generate exceptions.
      operationId: getOrderById
      parameters:
      - description: ID of order that needs to be fetched
        explode: false
        in: path
        name: orderId
        required: true
        schema:
          example: 1001
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Data contain float numbers.
      tags:
      - store
      x-accepts: application/json
      x-tags:
      - tag: store
      - tag: troublemaker
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
      summary: Create user
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/createwithlist:
    post:
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/User'
              type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful operation
        default:
          description: successful operation
      summary: Creates list of users with given input array
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/login:
    get:
      description: Logs user into the system
      operationId: loginUser
      parameters:
      - description: The user name for login
        explode: true
        in: query
        name: username
        required: false
        schema:
          example: jonny
          type: string
        style: form
      - description: The password for login in clear text
        explode: true
        in: query
        name: password
        required: false
        schema:
          example: password
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              explode: false
              schema:
                example: 100
                format: int32
                type: integer
              style: simple
            X-Expires-After:
              description: date in UTC when token expires
              explode: false
              schema:
                example: 2017-07-21T17:32:28Z
                format: date-time
                type: string
              style: simple
        "400":
          description: Invalid username/password supplied
      summary: Logs user into the system
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/logout:
    get:
      description: Logs out current logged in user session
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
      summary: Logs out current logged in user session
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
  /user/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - description: The name that needs to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          example: jonny
          type: string
        style: simple
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Delete user
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
    get:
      description: Get user by user name
      operationId: getUserByName
      parameters:
      - description: 'The name that needs to be fetched. Use user1 for testing. '
        explode: false
        in: path
        name: username
        required: true
        schema:
          example: jonny
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: successful operation
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      summary: Get user by user name
      tags:
      - user
      x-accepts: application/json
      x-tags:
      - tag: user
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - description: name that need to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          example: jonny
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Update an existent user in the store
      responses:
        default:
          description: successful operation
      summary: Update user
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
      x-tags:
      - tag: user
components:
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
    UserArray:
      content:
        application/json:
          schema:
            items:
              $ref: '#/components/schemas/User'
            type: array
      description: List of user object
  schemas:
    Book:
      properties:
        author:
          type: string
        errorMsg:
          type: string
        id:
          format: int64
          type: integer
        language:
          type: string
        title:
          type: string
      title: Book
      type: object
    BookResource:
      properties:
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
          xml:
            attribute: false
            name: link
            wrapped: false
        book:
          $ref: '#/components/schemas/Book'
      title: BookResource
      type: object
    Customer:
      example:
        name: name
        company: company
        id: 0
        errorMsg: errorMsg
      properties:
        company:
          type: string
        errorMsg:
          type: string
        id:
          format: int64
          type: integer
        name:
          type: string
      title: Customer
      type: object
    CustomerResource:
      properties:
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
          xml:
            attribute: false
            name: link
            wrapped: false
        customer:
          $ref: '#/components/schemas/Customer'
      title: CustomerResource
      type: object
    Link:
      properties:
        deprecation:
          type: string
          xml:
            attribute: true
            name: deprecation
            wrapped: false
        href:
          type: string
          xml:
            attribute: true
            name: href
            wrapped: false
        hreflang:
          type: string
          xml:
            attribute: true
            name: hreflang
            wrapped: false
        media:
          type: string
          xml:
            attribute: true
            name: media
            wrapped: false
        rel:
          type: string
          xml:
            attribute: true
            name: rel
            wrapped: false
        templated:
          type: boolean
        title:
          type: string
          xml:
            attribute: true
            name: title
            wrapped: false
        type:
          type: string
          xml:
            attribute: true
            name: type
            wrapped: false
      title: Link
      type: object
    ResourcesBookResource:
      properties:
        _embedded:
          items:
            $ref: '#/components/schemas/BookResource'
          type: array
          xml:
            attribute: false
            name: embedded
            wrapped: true
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
          xml:
            attribute: false
            name: link
            wrapped: false
      title: Resources«BookResource»
      type: object
    ResourcesCustomerResource:
      properties:
        _embedded:
          items:
            $ref: '#/components/schemas/CustomerResource'
          type: array
          xml:
            attribute: false
            name: embedded
            wrapped: true
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
          xml:
            attribute: false
            name: link
            wrapped: false
      title: Resources«CustomerResource»
      type: object
    ResourceCustomerResource:
      properties:
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
          xml:
            attribute: false
            name: link
            wrapped: false
        customer:
          $ref: '#/components/schemas/Customer'
      title: Resource«CustomerResource»
      type: object
    Resourceobject:
      properties:
        _links:
          items:
            $ref: '#/components/schemas/Link'
          type: array
          xml:
            attribute: false
            name: link
            wrapped: false
      title: Resource«object»
      type: object
    Order:
      example:
        petId: 198772
        rabatt: 25.9
        quantity: 7
        pricebrutto: 345.45
        pricenetto: 300.0
        id: 10
        shipDate: 2017-07-21T17:32:28Z
        complete: true
        status: approved
      properties:
        id:
          description: Id of the order.
          example: 10
          format: int64
          type: integer
        petId:
          description: PetId
          example: 198772
          format: int64
          type: integer
        pricebrutto:
          description: Brutto price
          example: 345.45
          format: float
          type: number
        pricenetto:
          description: Netto price
          example: 300.0
          format: float
          type: number
        rabatt:
          description: Rabatt reduction.
          example: 25.9
          format: float
          type: number
        quantity:
          description: Quantity
          example: 7
          format: int32
          type: integer
        shipDate:
          description: Shipping date.
          example: 2017-07-21T17:32:28Z
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
          - placed
          - approved
          - delivered
          example: approved
          type: string
        complete:
          description: Order completed.
          example: true
          type: boolean
      type: object
    Category:
      example:
        name: Dogs
        id: 1
      properties:
        id:
          description: Id
          example: 1
          format: int64
          type: integer
        name:
          description: Name of category.
          example: Dogs
          type: string
      type: object
    User:
      example:
        firstName: John
        lastName: James
        password: password
        userStatus: 1
        phone: "012345"
        id: 10
        email: john@email.com
        username: theUser
      properties:
        id:
          description: Id
          example: 10
          format: int64
          type: integer
        username:
          description: Username
          example: theUser
          type: string
        firstName:
          description: First name
          example: John
          type: string
        lastName:
          description: Last name
          example: James
          type: string
        email:
          description: User mail address.
          example: john@email.com
          format: email
          type: string
        password:
          description: Password.
          example: password
          type: string
        phone:
          description: Phone number
          example: "012345"
          type: string
        userStatus:
          description: User Status
          example: 1
          format: int32
          type: integer
      type: object
    Tag:
      example:
        name: tag1
        id: 1
      properties:
        id:
          description: Id
          example: 1
          format: int64
          type: integer
        name:
          description: Name of tag.
          example: tag1
          type: string
      type: object
    Pet:
      example:
        photoUrls: "[http://example.com/photo.png, http://example.com/photo2,png]"
        name: SChäferhund
        id: 10
        category:
          name: Dogs
          id: 1
        tags:
        - name: tag1
          id: 1
        - name: tag1
          id: 1
        status: available
      properties:
        id:
          description: Id
          example: 10
          format: int64
          type: integer
        name:
          description: Name
          example: SChäferhund
          type: string
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          description: Photo urls.
          example: "[http://example.com/photo.png, http://example.com/photo2,png]"
          items:
            type: string
          type: array
        tags:
          items:
            $ref: '#/components/schemas/Tag'
          type: array
        status:
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
          example: available
          type: string
      required:
      - name
      - photoUrls
      type: object
    RestError:
      description: The schema for all error responses.
      properties:
        status:
          description: The HTTP status code.
          example: 400
          format: int32
          readOnly: true
          title: Status
          type: integer
        error:
          description: The short error message.
          example: Bad Request
          readOnly: true
          title: Error
          type: string
        path:
          description: The path of the URL for this request.
          example: /api/owners
          format: uri
          readOnly: true
          title: Path
          type: string
        timestamp:
          description: The time the error occured.
          format: date-time
          readOnly: true
          title: Timestamp
          type: string
        message:
          description: The long error message.
          example: Request failed schema validation
          readOnly: true
          title: Message
          type: string
        trace:
          description: The stacktrace for this error.
          example: "com.atlassian.oai.validator.springmvc.InvalidRequestException:\
            \ ..."
          readOnly: true
          title: Trace
          type: string
      required:
      - error
      - message
      - path
      - schemaValidationErrors
      - status
      - timestamp
      title: REST Error
      type: object
    ModelApiResponse:
      example:
        code: 123
        type: responsetype
        message: Message.
      properties:
        code:
          description: Code
          example: 123
          format: int32
          type: integer
        type:
          description: Response type
          example: responsetype
          type: string
        message:
          description: The message.
          example: Message.
          type: string
      type: object
    uploadBinaryPlusObject_request:
      properties:
        pet:
          $ref: '#/components/schemas/Pet'
        fileName:
          format: binary
          type: string
      required:
      - pet
      type: object
    uploadBinary_request:
      properties:
        orderId:
          example: 999
          format: int32
          type: integer
        userId:
          example: 10001000
          format: int64
          type: integer
        fileName:
          format: binary
          type: string
      type: object
  securitySchemes:
    petstore_auth:
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
      type: oauth2
    api_key:
      in: header
      name: api_key
      type: apiKey
